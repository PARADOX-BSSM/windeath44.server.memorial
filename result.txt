# Character & Anime 합병 후 코드 분석 결과

## 1. 중복된 코드 패턴

### 1.1 findById 메서드 패턴 중복
- **위치**: 여러 Service 클래스들
- **문제**: 동일한 패턴이 반복됨
  ```java
  // CharacterService.java:30, 35
  public Character findById(Long characterId) {
    Character character = findCharacterById(characterId);
    return character; // 불필요한 변수 할당
  }

  public Character findCharacterById(Long characterId) {
    Character character = characterRepository.findById(characterId)
            .orElseThrow(NotFoundCharacterException::getInstance);
    return character; // 불필요한 변수 할당
  }
  ```
- **개선 방안**: 직접 반환하거나 메서드 통합

### 1.2 Exception 처리 패턴 중복
- **위치**: 각 도메인별 NotFound Exception들
- **문제**: 동일한 구조의 Exception 클래스들이 여러 개 존재
  - `NotFoundCharacterException`
  - `NotFoundAnimeException`
  - `MemorialNotFoundException`
  - `MemorialCommitNotFoundException`
  - `MemorialPullRequestNotFoundException`
  - `MemorialCommentNotFoundException`
- **개선 방안**: 제네릭을 활용한 공통 Exception 클래스 생성

### 1.3 bowCount 필드 중복
- **위치**:
  - `Character.java:39` - Character 엔티티
  - `Memorial.java:19` - Memorial 엔티티
  - `MemorialBow.java:23` - MemorialBow 엔티티
- **문제**: bowCount 개념이 여러 엔티티에 분산되어 있어 데이터 일관성 문제 가능성

## 2. 구조적 문제

### 2.1 디버그 코드 남아있음
- **위치**: `CharacterService.java:120`
- **문제**: `System.out.println(characterSlice.toString());` 프로덕션 코드에 디버그 출력문 존재
- **개선 방안**: 로거 사용 또는 제거

### 2.2 Mapper 중복 패턴
- **위치**: 각 도메인별 Mapper 클래스들
- **문제**:
  - `CharacterMapper`
  - `AnimeMapper`
  - `MemorialMapper`
  - `MemorialBowMapper`
  - `MemorialCommentMapper`
  - 등 동일한 패턴의 매핑 로직 반복

### 2.3 Repository 패턴 일관성 부족
- **문제**:
  - JPA Repository와 JDBC Repository 혼재 (`AnimeRepository`)
  - Custom Repository 구현 방식이 도메인마다 상이함

## 3. 이상한 패턴

### 3.1 불필요한 변수 할당
- **위치**: 여러 Service 메서드들
- **예시**:
  ```java
  // AnimeService.java:74-76
  public AnimeResponse findById(Long animeId) {
    Anime anime = findAnime(animeId);
    AnimeResponse animeResponse = animeMapper.toAnimeResponse(anime);
    return animeResponse; // 직접 반환 가능
  }
  ```

### 3.2 메서드명 불일치
- **위치**: `MemorialBowService.java:44`
- **문제**: `BowCountByMemorialId` - 메서드명 컨벤션 불일치 (대문자 B)

### 3.3 ResponseDto 중복 정의
- **위치**:
  - `global/dto/ResponseDto.java`
  - `memorial/dto/ResponseDto.java`
- **문제**: 동일한 목적의 클래스가 두 곳에 정의됨

## 4. 개선 권장사항

1. **공통 Exception 처리**: 제네릭을 활용한 EntityNotFoundException 생성
2. **디버그 코드 제거**: System.out.println 제거하고 로거 사용
3. **bowCount 로직 통합**: 데이터 일관성을 위한 단일 책임 설계
4. **불필요한 변수 할당 제거**: 코드 간소화
5. **ResponseDto 통합**: 중복된 ResponseDto 클래스 통합
6. **메서드명 컨벤션 통일**: camelCase 일관성 유지
7. **Repository 패턴 표준화**: JPA vs JDBC 사용 기준 명확화

## 5. 긍정적인 부분

1. **도메인별 패키지 분리**: character, anime, memorial 도메인이 잘 분리됨
2. **Mapper 패턴 사용**: DTO 변환 로직이 분리되어 있음
3. **Exception 처리**: 각 도메인별 적절한 예외 처리 구현
4. **테스트 코드 존재**: Service 계층에 대한 테스트 코드가 작성되어 있음